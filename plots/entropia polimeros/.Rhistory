d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) #- 0.2
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) - 0.2
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) - 0.2
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20,70)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6,0.85)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) - 0.5
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20,70)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6,0.85)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) - 1
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20,70)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6,0.85)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) #- 1
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20,70)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6,0.85)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(-1.)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) - 1
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20,70)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6,0.85)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
library(ggplot2)
library(dplyr)
library(tidyr)
# Parámetros
lp <- 3.04  # Longitud de persistencia en Amstrongs
# Ooka
calc_S1 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
S <- 1.5 * log(delta_ji + 2) + 1.5 * (d^2 - 3.8^2) / (lc * 2 * 20)
return(S)
}
# Zhou
calc_S2 <- function(d, delta_ji) {
lc <- (delta_ji+2) * 3.8
d <- d*lc
w <- (5.0 * lp / (4.0 * lc)) - (2.0 * d^2 / lc^2) +
(33.0 * d^4 / (80.0 * lp * lc^3)) +
(79.0 * lp^2 / (160.0 * lc^2)) +
(329.0 * d^2 * lp / (120.0 * lc^3)) -
(6799.0 * d^4 / (1600.0 * lc^4)) +
(3441.0 * d^6 / (2800.0 * lp * lc^5)) -
(1089.0 * d^8 / (12800.0 * lp^2 * lc^6)) - 1 # -1 is for avoiding NaN's, but it doesn't change the form of the functions
S <-  1.5 * log(4 * pi * lp * lc / 3) + 3 * d^2 / (4 * lp * lc) - log(1 - w)
return(S)
}
# Valores de delta_ji y rango de d
delta_ji <- c(0,5,20,70)
d <- seq(0, 1, 0.01)
# Calcular S1 y S2 para cada combinación de d y delta_ji
data <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
# Convertir los datos a formato largo usando gather
data_long <- data %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long, aes(x = d, y = S_value, color = factor(delta_ji), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed delta ij",
x = "r_ij/lc",
y = "S",
color = "delta_ij",
linetype = "S") +
theme_minimal()
############################ FIXED DISTANCE
d <- c(0.1, 0.3 , 0.6,0.85)
delta_ji <- seq(0,120,1)
data2 <- expand.grid(d = d, delta_ji = delta_ji) %>%
mutate(Ooka = mapply(calc_S1, d, delta_ji),
Zhou = mapply(calc_S2, d, delta_ji))
data_long2 <- data2 %>%
gather(key = "S_type", value = "S_value", Ooka, Zhou)
ggplot(data_long2, aes(x = delta_ji, y = S_value, color = factor(d), linetype = S_type)) +
geom_line(size = 1.2) +
labs(title = "fixed d (r_ij)",
x = "delta_ij",
y = "S",
color = "d/lc",
linetype = "S") +
theme_minimal()
