DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- 1.4400 #protein mass (10kg/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
# Definir las constantes a y b
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- 200#params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184 * 1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp'
Cp_prime <- Cp + (a+b*T/100)*Mr
return(Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- 1.4400 #protein mass (10kg/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
# Definir las constantes a y b
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- 5#params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184 * 1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp'
Cp_prime <- Cp + (a+b*T/100)*Mr
return(Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- 14400 #protein mass (10kg/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
# Definir las constantes a y b
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184 * 1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp'
Cp_prime <- Cp + (a+b*T/100)*Mr
return(Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- .14400 #protein mass (10kg/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
# Definir las constantes a y b
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184 * 1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp'
Cp_prime <- Cp + (a+b*T/100)*Mr
return(Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- 1 #protein mass (10kg/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
# Definir las constantes a y b
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184 * 1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp'
Cp_prime <- Cp + (a+b*T/100)*Mr
return(Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- 1.4400 #protein mass (10kg/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
# Definir las constantes a y b
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184 * 1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp'
Cp_prime <- Cp + (a+b*T/100)*Mr
return(Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Parámetros
Mr <- 14400 #protein mass (g/mol)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]
Cp_prime <- data[[8]]
# Filtrar los datos para temperaturas >= 300K
filtered_data <- data[T >= 300, ]
T_filtered <- filtered_data[[2]]
Cp_prime_filtered <- filtered_data[[8]]
Cp_sim <- Cp_prime_filtered - (a+b*T_filtered/100)*Mr
# Definir las constantes a y b (KJ/kmol y KJ/k^2mol)
a <- 1.575E-003
b <- 5.541E-003
# Definir la función a ajustar
fit_function <- function(params, T, Cp) {
Tm <- params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * (4.184/1000)  # Constante de los gases en KJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
return(Cp)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 350, DeltaH = 400, DeltaCp = 2)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp = Cp_sim)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "KJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "KJ/(K*mol)\n")
# Calcular los valores ajustados de Cp' para graficar
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos y la curva ajustada
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue",  alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red",) +
labs(x = "Temperature (K)", y = "<Cp'> (KJ/(K*mol))", title = "Fitted Cp' Curve") +
theme_minimal()
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]  # Temperatura en Kelvin
Cp_prime <- data[[8]]  # Calor específico en kJ/(K*mol)
# Filtrar las temperaturas para quedarte con las mayores de 300 K
filtered_indices <- T >= 300
T_filtered <- T[filtered_indices]
Cp_prime_filtered <- Cp_prime[filtered_indices]
# Definir las constantes a, b y Mr
a <- 1.575E-003
b <- 5.541E-003
Mr <- 14000  # Masa molecular de la proteína en g/mol (ajusta este valor según corresponda)
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- params[1]
DeltaH <- params[2] * 4.184  # Convertir de cal a kJ (1 cal = 4.184 J)
DeltaCp <- params[3] * 4.184  # Convertir de cal/(K*mol) a kJ/(K*mol)
R <- 1.987 * 4.184 / 1000  # Constante de los gases en kJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp' usando la fórmula proporcionada
Cp_prime_calculated <- Cp + (a + b * T / 100) * Mr
return(Cp_prime_calculated - Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 333, DeltaH = 100, DeltaCp = 2)  # Valores iniciales en kJ/mol y kJ/(K*mol)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "kJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "kJ/(K*mol)\n")
# Calcular los valores ajustados de Cp'
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos experimentales y simulados
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue", size = 2, alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red", size = 1) +
labs(x = "Temperatura (K)", y = "Cp' (kJ/(K*mol))", title = "Ajuste de Cp'") +
theme_minimal() +
scale_color_manual(name = "Leyenda", values = c("Datos experimentales" = "blue", "Valores simulados" = "red"))
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]  # Temperatura en Kelvin
Cp_prime <- data[[8]]  # Calor específico en kJ/(K*mol)
# Filtrar las temperaturas para quedarte con las mayores de 300 K
filtered_indices <- T >= 300
T_filtered <- T[filtered_indices]
Cp_prime_filtered <- Cp_prime[filtered_indices]
# Definir las constantes a, b y Mr
a <- 1.575E-003
b <- 5.541E-003
Mr <- 14000  # Masa molecular de la proteína en g/mol (ajusta este valor según corresponda)
# Definir la función a ajustar
fit_function <- function(params, T, Cp_prime) {
Tm <- params[1]
DeltaH <- params[2]
DeltaCp <- params[3]
R <- 1.987 * 4.184 / 1000  # Constante de los gases en kJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
# Calcular Cp' usando la fórmula proporcionada
Cp_prime_calculated <- Cp + (a + b * T / 100) * Mr
return(Cp_prime_calculated - Cp_prime)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 333, DeltaH = 100, DeltaCp = 2)  # Valores iniciales en kJ/mol y kJ/(K*mol)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp_prime = Cp_prime_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "kJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "kJ/(K*mol)\n")
# Calcular los valores ajustados de Cp'
Cp_prime_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_prime_filtered
# Graficar los datos experimentales y simulados
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_prime_filtered), color = "blue", size = 2, alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_prime_fitted), color = "red", size = 1) +
labs(x = "Temperatura (K)", y = "Cp' (kJ/(K*mol))", title = "Ajuste de Cp'") +
theme_minimal() +
scale_color_manual(name = "Leyenda", values = c("Datos experimentales" = "blue", "Valores simulados" = "red"))
# Cargar las librerías necesarias
library(minpack.lm)
library(ggplot2)
# Leer los datos
data <- read.table("profthermo.dat", header = FALSE)
T <- data[[2]]  # Temperatura en Kelvin
Cp_prime <- data[[8]]  # Calor específico en kJ/(K*mol)
# Filtrar las temperaturas para quedarte con las mayores de 300 K
filtered_indices <- T >= 300
T_filtered <- T[filtered_indices]
Cp_prime_filtered <- Cp_prime[filtered_indices]
# Definir las constantes a, b y Mr
a <- 1.575E-003
b <- 5.541E-003
Mr <- 50000  # Masa molecular de la proteína en g/mol (ajusta este valor según corresponda)
# Calcular Cp a partir de Cp' usando la fórmula inversa: Cp = (Cp' - (a + b * T / 100) * Mr)
Cp_filtered <- Cp_prime_filtered - (a + b * T_filtered / 100) * Mr
# Definir la función a ajustar para Cp
fit_function <- function(params, T, Cp) {
Tm <- params[1]
DeltaH <- params[2] * 4.184  # Convertir de cal a kJ (1 cal = 4.184 J)
DeltaCp <- params[3] * 4.184  # Convertir de cal/(K*mol) a kJ/(K*mol)
R <- 1.987 * 4.184 / 1000  # Constante de los gases en kJ/(K*mol)
# Calcular Cp usando el modelo de transición de dos estados
Cp_calculated <- DeltaCp + (DeltaH^2 / (R * T^2)) * exp((DeltaH / R) * (1 / Tm - 1 / T)) /
(1 + exp((DeltaH / R) * (1 / Tm - 1 / T)))^2
return(Cp_calculated - Cp)
}
# Ajustar los parámetros iniciales
initial_params <- c(Tm = 333, DeltaH = 100, DeltaCp = 2)  # Valores iniciales en kJ/mol y kJ/(K*mol)
# Realizar el ajuste
fit <- nls.lm(par = initial_params, fn = fit_function, T = T_filtered, Cp = Cp_filtered)
# Obtener los resultados
fit_params <- coef(fit)
Tm_fitted <- fit_params[1]
DeltaH_fitted <- fit_params[2]
DeltaCp_fitted <- fit_params[3]
# Imprimir los resultados
cat("Tm:", Tm_fitted, "K\n")
cat("DeltaH:", DeltaH_fitted, "kJ/mol\n")
cat("DeltaCp:", DeltaCp_fitted, "kJ/(K*mol)\n")
# Calcular los valores ajustados de Cp para graficar
Cp_fitted <- fit_function(fit_params, T_filtered, rep(0, length(T_filtered))) + Cp_filtered
# Graficar los datos experimentales y simulados
ggplot() +
geom_point(aes(x = T_filtered, y = Cp_filtered), color = "blue", size = 2, alpha = 0.6) +
geom_line(aes(x = T_filtered, y = Cp_fitted), color = "red", size = 1) +
labs(x = "Temperatura (K)", y = "Cp (kJ/(K*mol))", title = "Ajuste de Cp") +
theme_minimal() +
scale_color_manual(name = "Leyenda", values = c("Datos experimentales" = "blue", "Valores simulados" = "red"))
