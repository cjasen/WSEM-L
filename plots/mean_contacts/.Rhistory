# Leer el archivo 2PHT.map
archivo <- "2PHT.map"
datos <- read.table(archivo, header = FALSE, col.names = c("i", "j", "n"))
# Calcular la suma de contactos para cada residuo
# Consideramos tanto i como j porque los contactos pueden estar en cualquiera de los dos índices
contactos_por_residuo <- tapply(datos$n, datos$i, sum, default = 0) +
tapply(datos$n, datos$j, sum, default = 0)
# Convertir en un data.frame para facilitar el manejo
contactos_df <- data.frame(Residuo = 1:83,
MediaContactos = contactos_por_residuo / (length(contactos_por_residuo)))
# Leer el archivo 2PHT.map
archivo <- "2PHT.map"
datos <- read.table(archivo, header = FALSE, col.names = c("i", "j", "n"))
# Crear un vector para almacenar los contactos totales de cada residuo (1 a 83)
residuos <- 1:83
contactos_por_residuo <- numeric(length(residuos))  # Inicializar con ceros
# Sumar contactos para cada residuo considerando tanto i como j
for (residuo in residuos) {
contactos_i <- sum(datos$n[datos$i == residuo], na.rm = TRUE)  # Contactos como i
contactos_j <- sum(datos$n[datos$j == residuo], na.rm = TRUE)  # Contactos como j
contactos_por_residuo[residuo] <- contactos_i + contactos_j
}
# Crear el data frame con las medias de contactos
contactos_df <- data.frame(Residuo = residuos,
MediaContactos = contactos_por_residuo)
# Extraer la información del residuo 57
contactos_residuo_57 <- contactos_df[contactos_df$Residuo == 57, "MediaContactos"]
# Comparar la media de contactos de cada residuo con el residuo 57
comparacion <- contactos_df
comparacion$DiferenciaCon57 <- comparacion$MediaContactos - contactos_residuo_57
# Mostrar resultados
print(comparacion)
# Graficar la comparación de la media de contactos
library(ggplot2)
ggplot(comparacion, aes(x = Residuo, y = MediaContactos)) +
geom_bar(stat = "identity", fill = "skyblue", alpha = 0.8) +
geom_hline(yintercept = contactos_residuo_57, color = "red", linetype = "dashed") +
labs(title = "Media de contactos por residuo",
x = "Residuo", y = "Media de contactos") +
theme_minimal()
# Leer el archivo 2PHT.map
archivo <- "2PHT.map"
datos <- read.table(archivo, header = FALSE, col.names = c("i", "j", "n"))
# Crear un vector para almacenar los contactos totales de cada residuo (1 a 83)
residuos <- 1:83
contactos_por_residuo <- numeric(length(residuos))  # Inicializar con ceros
# Sumar contactos para cada residuo considerando tanto i como j
for (residuo in residuos) {
contactos_i <- sum(datos$n[datos$i == residuo], na.rm = TRUE)  # Contactos como i
contactos_j <- sum(datos$n[datos$j == residuo], na.rm = TRUE)  # Contactos como j
contactos_por_residuo[residuo] <- contactos_i + contactos_j
}
# Crear el data frame con las medias de contactos
contactos_df <- data.frame(Residuo = residuos,
MediaContactos = contactos_por_residuo)
# Extraer la información del residuo 58
contactos_residuo <- contactos_df[contactos_df$Residuo == 58, "MediaContactos"]
# Comparar la media de contactos de cada residuo con el residuo 57
comparacion <- contactos_df
comparacion$DiferenciaCon57 <- comparacion$MediaContactos - contactos_residuo
# Mostrar resultados
print(comparacion)
# Graficar la comparación de la media de contactos
library(ggplot2)
ggplot(comparacion, aes(x = Residuo, y = MediaContactos)) +
geom_bar(stat = "identity", fill = "skyblue", alpha = 0.8) +
geom_hline(yintercept = contactos_residuo, color = "red", linetype = "dashed") +
labs(title = "Media de contactos por residuo",
x = "Residuo", y = "Media de contactos") +
theme_minimal()
# Leer el archivo 2PHT.map
archivo <- "2PHT.map"
datos <- read.table(archivo, header = FALSE, col.names = c("i", "j", "n"))
# Crear un vector para almacenar los contactos totales de cada residuo (1 a 83)
residuos <- 1:83
contactos_por_residuo <- numeric(length(residuos))  # Inicializar con ceros
# Sumar contactos para cada residuo considerando tanto i como j
for (residuo in residuos) {
contactos_i <- sum(datos$n[datos$i == residuo], na.rm = TRUE)  # Contactos como i
contactos_j <- sum(datos$n[datos$j == residuo], na.rm = TRUE)  # Contactos como j
contactos_por_residuo[residuo] <- contactos_i + contactos_j
}
# Crear el data frame con las medias de contactos
contactos_df <- data.frame(Residuo = residuos,
MediaContactos = contactos_por_residuo)
# Extraer la información del residuo 58
contactos_residuo <- contactos_df[contactos_df$Residuo == 57, "MediaContactos"]
# Comparar la media de contactos de cada residuo con el residuo 57
comparacion <- contactos_df
comparacion$DiferenciaCon57 <- comparacion$MediaContactos - contactos_residuo
# Mostrar resultados
print(comparacion)
# Graficar la comparación de la media de contactos
library(ggplot2)
ggplot(comparacion, aes(x = Residuo, y = MediaContactos)) +
geom_bar(stat = "identity", fill = "skyblue", alpha = 0.8) +
geom_hline(yintercept = contactos_residuo, color = "red", linetype = "dashed") +
labs(title = "Media de contactos por residuo",
x = "Residuo", y = "Media de contactos") +
theme_minimal()
# Leer el archivo 2PHT.map
archivo <- "2PHT.map"
datos <- read.table(archivo, header = FALSE, col.names = c("i", "j", "n"))
# Crear un vector para almacenar los contactos totales de cada residuo (1 a 83)
residuos <- 1:83
contactos_por_residuo <- numeric(length(residuos))  # Inicializar con ceros
# Sumar contactos para cada residuo considerando tanto i como j
for (residuo in residuos) {
contactos_i <- sum(datos$n[datos$i == residuo], na.rm = TRUE)  # Contactos como i
contactos_j <- sum(datos$n[datos$j == residuo], na.rm = TRUE)  # Contactos como j
contactos_por_residuo[residuo] <- contactos_i + contactos_j
}
# Crear el data frame con las medias de contactos
contactos_df <- data.frame(Residuo = residuos,
MediaContactos = contactos_por_residuo)
# Extraer la información del residuo
contactos_residuo <- contactos_df[contactos_df$Residuo == 57, "MediaContactos"]
# Comparar la media de contactos de cada residuo con el residuo
comparacion <- contactos_df
comparacion$DiferenciaCon57 <- comparacion$MediaContactos - contactos_residuo
# Mostrar resultados
print(comparacion)
library(ggplot2)
ggplot(comparacion, aes(x = Residuo, y = MediaContactos, fill = Residuo == 57)) +
geom_bar(stat = "identity", alpha = 0.8) +
geom_hline(yintercept = contactos_residuo_57, color = "red", linetype = "dashed") +
scale_fill_manual(values = c("skyblue", "red"), guide = "none") +  # Asigna colores
labs(title = "Media de contactos por residuo",
x = "Residuo", y = "Media de contactos") +
theme_minimal()
